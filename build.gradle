buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'in.deepanshutyagi'
version = '0.0.1'
sourceCompatibility = 8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('javax.xml.bind:jaxb-api:2.3.0')
	runtime('org.postgresql:postgresql')
	compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}

def webappDir = "$projectDir/src/main/client"
sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "buildAngular"
}

task buildAngular(type:Exec) {
	// installAngular should be run prior to this task
	dependsOn "installAngular"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	// Add task to the standard build group
	group = BasePlugin.BUILD_GROUP
	// ng doesn't exist as a file in windows -> ng.cmd
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "run", "build", "--prod"
	} else {
		commandLine "npm", "run", "build", "--prod"
	}
}

task installAngular(type:Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}
}

task stage {
	dependsOn build
	doLast {
		delete fileTree(dir: "build", exclude: "libs")
		delete fileTree(dir: "build/libs", exclude: "*.jar")
		delete fileTree(dir: "src/main/client/node_modules")
	}
}
